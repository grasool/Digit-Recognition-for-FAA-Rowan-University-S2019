# -*- coding: utf-8 -*-
"""Copy of Code_1-MNIST

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fjw1ouHibVDcfI1oRWSRwNqLKYejmgQT
"""

import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.optimizers import RMSprop

import numpy as np
import matplotlib.pyplot as plt
import cv2

batch_size = 1024
num_classes = 10
epochs = 5

(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train = x_train.reshape(60000, 784)
x_test = x_test.reshape(10000, 784)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# convert class vectors to binary class matrices
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

model = Sequential()
model.add(Dense(100, activation='relu', input_shape=(784,)))
model.add(Dense(50, activation='relu'))
model.add(Dense(10, activation='softmax'))
model.summary()
model.compile(loss= 'categorical_crossentropy',
              optimizer= 'adam',
              metrics=['accuracy'])

history = model.fit(x_train, y_train,
                    batch_size=batch_size,
                    epochs=epochs,
                    verbose=1,
                    validation_data=(x_test, y_test))

score = model.evaluate(x_test, y_test, verbose=1)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

#%%
index = 0
prediction = 'Prediction: '
while index < 10 :
  im = cv2.imread(str(index)+'.jpg', 0)
  im = im.reshape(1,784)
  im = im.astype('float32')
  im/=255

  prediction += str(np.argmax(model.predict(im), axis = 1)[0]) + ' '
  index+=1
  
print(prediction)

#%%
im = cv2.imread('0.jpg', 0)
im = im.reshape(1,784)
im = im.astype('float32')
im/=255

prediction = np.argmax(model.predict(im), axis = 1)[0]
  
print(prediction)

#%%
index = 0

while index < 1000 :
  im = cv2.imread('bigdataFilt/'+str(index)+'.jpg', 0)
  im2 = im.reshape(1,784)
  im2 = im2.astype('float32')
  im2/=255

  prediction = np.argmax(model.predict(im2), axis = 1)[0]
  cv2.imwrite('labelled/'+ str(prediction)+ '_' +str(index)+'.jpg', cv2.imread('bigdata/'+str(index)+'.jpg'))
  index+=1
  
print(prediction)